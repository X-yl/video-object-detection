// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: helloworld.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_helloworld_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_helloworld_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_helloworld_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_helloworld_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_helloworld_2eproto;
namespace helloworld {
class FrameStatus;
struct FrameStatusDefaultTypeInternal;
extern FrameStatusDefaultTypeInternal _FrameStatus_default_instance_;
class ProcessRequest;
struct ProcessRequestDefaultTypeInternal;
extern ProcessRequestDefaultTypeInternal _ProcessRequest_default_instance_;
}  // namespace helloworld
PROTOBUF_NAMESPACE_OPEN
template <>
::helloworld::FrameStatus* Arena::CreateMaybeMessage<::helloworld::FrameStatus>(Arena*);
template <>
::helloworld::ProcessRequest* Arena::CreateMaybeMessage<::helloworld::ProcessRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace helloworld {

// ===================================================================


// -------------------------------------------------------------------

class ProcessRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:helloworld.ProcessRequest) */ {
 public:
  inline ProcessRequest() : ProcessRequest(nullptr) {}
  ~ProcessRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ProcessRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessRequest(const ProcessRequest& from);
  ProcessRequest(ProcessRequest&& from) noexcept
    : ProcessRequest() {
    *this = ::std::move(from);
  }

  inline ProcessRequest& operator=(const ProcessRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessRequest& operator=(ProcessRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessRequest* internal_default_instance() {
    return reinterpret_cast<const ProcessRequest*>(
               &_ProcessRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProcessRequest& a, ProcessRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProcessRequest& from) {
    ProcessRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "helloworld.ProcessRequest";
  }
  protected:
  explicit ProcessRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path() ;
  const std::string& path() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* ptr);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // @@protoc_insertion_point(class_scope:helloworld.ProcessRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_helloworld_2eproto;
};// -------------------------------------------------------------------

class FrameStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:helloworld.FrameStatus) */ {
 public:
  inline FrameStatus() : FrameStatus(nullptr) {}
  ~FrameStatus() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FrameStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameStatus(const FrameStatus& from);
  FrameStatus(FrameStatus&& from) noexcept
    : FrameStatus() {
    *this = ::std::move(from);
  }

  inline FrameStatus& operator=(const FrameStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameStatus& operator=(FrameStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrameStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameStatus* internal_default_instance() {
    return reinterpret_cast<const FrameStatus*>(
               &_FrameStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FrameStatus& a, FrameStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrameStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FrameStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FrameStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FrameStatus& from) {
    FrameStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "helloworld.FrameStatus";
  }
  protected:
  explicit FrameStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamesFieldNumber = 2,
    kProbabilitiesFieldNumber = 3,
    kFrameCountFieldNumber = 1,
  };
  // repeated string names = 2;
  int names_size() const;
  private:
  int _internal_names_size() const;

  public:
  void clear_names() ;
  const std::string& names(int index) const;
  std::string* mutable_names(int index);
  void set_names(int index, const std::string& value);
  void set_names(int index, std::string&& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, std::size_t size);
  void set_names(int index, absl::string_view value);
  std::string* add_names();
  void add_names(const std::string& value);
  void add_names(std::string&& value);
  void add_names(const char* value);
  void add_names(const char* value, std::size_t size);
  void add_names(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_names();

  private:
  const std::string& _internal_names(int index) const;
  std::string* _internal_add_names();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_names();

  public:
  // repeated float probabilities = 3;
  int probabilities_size() const;
  private:
  int _internal_probabilities_size() const;

  public:
  void clear_probabilities() ;
  float probabilities(int index) const;
  void set_probabilities(int index, float value);
  void add_probabilities(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& probabilities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* mutable_probabilities();

  private:
  float _internal_probabilities(int index) const;
  void _internal_add_probabilities(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& _internal_probabilities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* _internal_mutable_probabilities();

  public:
  // int32 frame_count = 1;
  void clear_frame_count() ;
  ::int32_t frame_count() const;
  void set_frame_count(::int32_t value);

  private:
  ::int32_t _internal_frame_count() const;
  void _internal_set_frame_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:helloworld.FrameStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> names_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<float> probabilities_;
    ::int32_t frame_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_helloworld_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ProcessRequest

// string path = 1;
inline void ProcessRequest::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& ProcessRequest::path() const {
  // @@protoc_insertion_point(field_get:helloworld.ProcessRequest.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProcessRequest::set_path(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:helloworld.ProcessRequest.path)
}
inline std::string* ProcessRequest::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:helloworld.ProcessRequest.path)
  return _s;
}
inline const std::string& ProcessRequest::_internal_path() const {
  return _impl_.path_.Get();
}
inline void ProcessRequest::_internal_set_path(const std::string& value) {
  ;


  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessRequest::_internal_mutable_path() {
  ;
  return _impl_.path_.Mutable( GetArenaForAllocation());
}
inline std::string* ProcessRequest::release_path() {
  // @@protoc_insertion_point(field_release:helloworld.ProcessRequest.path)
  return _impl_.path_.Release();
}
inline void ProcessRequest::set_allocated_path(std::string* value) {
  _impl_.path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:helloworld.ProcessRequest.path)
}

// -------------------------------------------------------------------

// FrameStatus

// int32 frame_count = 1;
inline void FrameStatus::clear_frame_count() {
  _impl_.frame_count_ = 0;
}
inline ::int32_t FrameStatus::frame_count() const {
  // @@protoc_insertion_point(field_get:helloworld.FrameStatus.frame_count)
  return _internal_frame_count();
}
inline void FrameStatus::set_frame_count(::int32_t value) {
  _internal_set_frame_count(value);
  // @@protoc_insertion_point(field_set:helloworld.FrameStatus.frame_count)
}
inline ::int32_t FrameStatus::_internal_frame_count() const {
  return _impl_.frame_count_;
}
inline void FrameStatus::_internal_set_frame_count(::int32_t value) {
  ;
  _impl_.frame_count_ = value;
}

// repeated string names = 2;
inline int FrameStatus::_internal_names_size() const {
  return _impl_.names_.size();
}
inline int FrameStatus::names_size() const {
  return _internal_names_size();
}
inline void FrameStatus::clear_names() {
  _internal_mutable_names()->Clear();
}
inline std::string* FrameStatus::add_names() {
  std::string* _s = _internal_add_names();
  // @@protoc_insertion_point(field_add_mutable:helloworld.FrameStatus.names)
  return _s;
}
inline const std::string& FrameStatus::names(int index) const {
  // @@protoc_insertion_point(field_get:helloworld.FrameStatus.names)
  return _internal_names(index);
}
inline std::string* FrameStatus::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:helloworld.FrameStatus.names)
  return _internal_mutable_names()->Mutable(index);
}
inline void FrameStatus::set_names(int index, const std::string& value) {
  _internal_mutable_names()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:helloworld.FrameStatus.names)
}
inline void FrameStatus::set_names(int index, std::string&& value) {
  _internal_mutable_names()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:helloworld.FrameStatus.names)
}
inline void FrameStatus::set_names(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_names()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:helloworld.FrameStatus.names)
}
inline void FrameStatus::set_names(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_names()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:helloworld.FrameStatus.names)
}
inline void FrameStatus::set_names(int index, absl::string_view value) {
  _internal_mutable_names()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:helloworld.FrameStatus.names)
}
inline void FrameStatus::add_names(const std::string& value) {
  _internal_mutable_names()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:helloworld.FrameStatus.names)
}
inline void FrameStatus::add_names(std::string&& value) {
  _internal_mutable_names()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:helloworld.FrameStatus.names)
}
inline void FrameStatus::add_names(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_names()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:helloworld.FrameStatus.names)
}
inline void FrameStatus::add_names(const char* value, std::size_t size) {
  _internal_mutable_names()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:helloworld.FrameStatus.names)
}
inline void FrameStatus::add_names(absl::string_view value) {
  _internal_mutable_names()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:helloworld.FrameStatus.names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FrameStatus::names() const {
  // @@protoc_insertion_point(field_list:helloworld.FrameStatus.names)
  return _internal_names();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* FrameStatus::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:helloworld.FrameStatus.names)
  return _internal_mutable_names();
}
inline const std::string& FrameStatus::_internal_names(int index) const {
  return _internal_names().Get(index);
}
inline std::string* FrameStatus::_internal_add_names() {
  return _internal_mutable_names()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FrameStatus::_internal_names() const {
  return _impl_.names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FrameStatus::_internal_mutable_names() {
  return &_impl_.names_;
}

// repeated float probabilities = 3;
inline int FrameStatus::_internal_probabilities_size() const {
  return _impl_.probabilities_.size();
}
inline int FrameStatus::probabilities_size() const {
  return _internal_probabilities_size();
}
inline void FrameStatus::clear_probabilities() {
  _internal_mutable_probabilities()->Clear();
}
inline float FrameStatus::probabilities(int index) const {
  // @@protoc_insertion_point(field_get:helloworld.FrameStatus.probabilities)
  return _internal_probabilities(index);
}
inline void FrameStatus::set_probabilities(int index, float value) {
  _internal_mutable_probabilities()->Set(index, value);
  // @@protoc_insertion_point(field_set:helloworld.FrameStatus.probabilities)
}
inline void FrameStatus::add_probabilities(float value) {
  _internal_add_probabilities(value);
  // @@protoc_insertion_point(field_add:helloworld.FrameStatus.probabilities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& FrameStatus::probabilities() const {
  // @@protoc_insertion_point(field_list:helloworld.FrameStatus.probabilities)
  return _internal_probabilities();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* FrameStatus::mutable_probabilities() {
  // @@protoc_insertion_point(field_mutable_list:helloworld.FrameStatus.probabilities)
  return _internal_mutable_probabilities();
}

inline float FrameStatus::_internal_probabilities(int index) const {
  return _internal_probabilities().Get(index);
}
inline void FrameStatus::_internal_add_probabilities(float value) {
  _internal_mutable_probabilities()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& FrameStatus::_internal_probabilities() const {
  return _impl_.probabilities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* FrameStatus::_internal_mutable_probabilities() {
  return &_impl_.probabilities_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace helloworld


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_helloworld_2eproto_2epb_2eh
