// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: helloworld.proto

#include "helloworld.pb.h"
#include "helloworld.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace helloworld {

static const char* Greeter_method_names[] = {
  "/helloworld.Greeter/ProcessVideo",
};

std::unique_ptr< Greeter::Stub> Greeter::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Greeter::Stub> stub(new Greeter::Stub(channel, options));
  return stub;
}

Greeter::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ProcessVideo_(Greeter_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::helloworld::FrameStatus>* Greeter::Stub::ProcessVideoRaw(::grpc::ClientContext* context, const ::helloworld::ProcessRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::helloworld::FrameStatus>::Create(channel_.get(), rpcmethod_ProcessVideo_, context, request);
}

void Greeter::Stub::async::ProcessVideo(::grpc::ClientContext* context, const ::helloworld::ProcessRequest* request, ::grpc::ClientReadReactor< ::helloworld::FrameStatus>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::helloworld::FrameStatus>::Create(stub_->channel_.get(), stub_->rpcmethod_ProcessVideo_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::helloworld::FrameStatus>* Greeter::Stub::AsyncProcessVideoRaw(::grpc::ClientContext* context, const ::helloworld::ProcessRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::helloworld::FrameStatus>::Create(channel_.get(), cq, rpcmethod_ProcessVideo_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::helloworld::FrameStatus>* Greeter::Stub::PrepareAsyncProcessVideoRaw(::grpc::ClientContext* context, const ::helloworld::ProcessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::helloworld::FrameStatus>::Create(channel_.get(), cq, rpcmethod_ProcessVideo_, context, request, false, nullptr);
}

Greeter::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Greeter::Service, ::helloworld::ProcessRequest, ::helloworld::FrameStatus>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::helloworld::ProcessRequest* req,
             ::grpc::ServerWriter<::helloworld::FrameStatus>* writer) {
               return service->ProcessVideo(ctx, req, writer);
             }, this)));
}

Greeter::Service::~Service() {
}

::grpc::Status Greeter::Service::ProcessVideo(::grpc::ServerContext* context, const ::helloworld::ProcessRequest* request, ::grpc::ServerWriter< ::helloworld::FrameStatus>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace helloworld

